{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["Prompt","className","BlinkingPrompt","WhoAmI","Fragment","ListExperiences","EchoEducation","LessSkills","App","href","target","rel","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"+LA2CMA,G,KAAS,WACb,OACE,0BAAMC,UAAU,UACd,0BAAMA,UAAU,eAAhB,eACA,0BAAMA,UAAU,eAAhB,KACA,0BAAMA,UAAU,mBAAhB,KACA,0BAAMA,UAAU,eAAhB,QAKAC,EAAiB,WACrB,OACE,yBAAKD,UAAU,mBACb,kBAAC,EAAD,MACA,0BAAMA,UAAU,oBAKhBE,EAAS,WACb,OACE,kBAAC,IAAMC,SAAP,KACE,yBAAKH,UAAU,mBACb,kBAAC,EAAD,MACA,0BAAMA,UAAU,eAAhB,WAEF,yBAAKA,UAAU,0BAAf,qBAEE,6BAFF,iBAIE,6BAJF,6CAWAI,EAAkB,WACtB,OACE,kBAAC,IAAMD,SAAP,KACE,yBAAKH,UAAU,mBACb,kBAAC,EAAD,MACA,0BAAMA,UAAU,eAAhB,wBAEF,yBAAKA,UAAU,0BAAf,iBAEE,6BAFF,iFAIE,6BAJF,+EAME,6BANF,6EAQE,6BARF,gFAeAK,EAAgB,WACpB,OACE,kBAAC,IAAMF,SAAP,KACE,yBAAKH,UAAU,mBACb,kBAAC,EAAD,MACA,0BAAMA,UAAU,eAAhB,oBAEF,yBAAKA,UAAU,0BAAf,mDAKAM,EAAa,WACjB,OACE,kBAAC,IAAMH,SAAP,KACE,yBAAKH,UAAU,mBACb,kBAAC,EAAD,MACA,0BAAMA,UAAU,eAAhB,oCAEF,yBAAKA,UAAU,0BAAf,OAEE,6BAFF,UAIE,6BAJF,QAME,6BANF,UAQE,6BARF,SAeSO,EAtIH,WACV,OACE,6BACE,yBAAKP,UAAU,aACb,yBAAKA,UAAU,YACb,yBAAKA,UAAU,iBACb,yBAAKA,UAAU,mBACb,kBAAC,EAAD,MACA,0BAAMA,UAAU,eAAhB,kBAEF,yBAAKA,UAAU,0BAAf,yBAEE,6BAFF,kCAKA,kBAAC,EAAD,MACA,kBAAC,EAAD,MACA,kBAAC,EAAD,MACA,kBAAC,EAAD,MACA,kBAAC,EAAD,SAKN,yBAAKA,UAAU,UACb,0BAAMA,UAAU,eAAhB,iBAEE,uBAAGQ,KAAK,iDAAiDC,OAAO,SAASC,IAAI,uBAA7E,YAFF,YAME,uBAAGF,KAAK,2BAA2BC,OAAO,SAASC,IAAI,uBAAvD,cCtBUC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MAAM,2DCZnCC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SDqH3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAACC,GAClCA,EAAaC,kB","file":"static/js/main.db846eb9.chunk.js","sourcesContent":["import React from 'react';\nimport './App.scss';\n\nconst App = () => {\n  return (\n    <div>\n      <div className=\"container\">\n        <div className=\"terminal\">\n          <div className=\"terminal_body\">\n            <div className=\"terminal_prompt\">\n              <Prompt />\n              <span className=\"prompt_text\">cat intro.txt</span>\n            </div>\n            <div className=\"terminal_prompt_output\">\n              Welcome to my website!\n              <br />\n              Construction is in progress...\n            </div>\n            <WhoAmI />\n            <ListExperiences />\n            <EchoEducation />\n            <LessSkills />\n            <BlinkingPrompt />\n          </div>\n        </div>\n      </div>\n\n      <div className=\"footer\">\n        <span className=\"footer_text\">\n          Find me on&nbsp;\n          <a href=\"https://www.linkedin.com/in/theodoresinhantan/\" target=\"_blank\" rel=\"noopener noreferrer\">\n            LinkedIn\n          </a>\n          &nbsp;|&nbsp;\n          <a href=\"https://github.com/tstan\" target=\"_blank\" rel=\"noopener noreferrer\">\n            GitHub\n          </a>\n        </span>\n      </div>\n    </div>\n  );\n};\n\nconst Prompt = () => {\n  return (\n    <span className=\"prompt\">\n      <span className=\"prompt_user\">tstan@about</span>\n      <span className=\"prompt_icon\">:</span>\n      <span className=\"prompt_location\">~</span>\n      <span className=\"prompt_icon\">$</span>\n    </span>\n  );\n};\n\nconst BlinkingPrompt = () => {\n  return (\n    <div className=\"terminal_prompt\">\n      <Prompt />\n      <span className=\"prompt_cursor\"></span>\n    </div>\n  );\n};\n\nconst WhoAmI = () => {\n  return (\n    <React.Fragment>\n      <div className=\"terminal_prompt\">\n        <Prompt />\n        <span className=\"prompt_text\">whoami</span>\n      </div>\n      <div className=\"terminal_prompt_output\">\n        Name: Theodore Tan\n        <br />\n        Nickname: Theo\n        <br />\n        Current Title: Software Engineer @ Kasa\n      </div>\n    </React.Fragment>\n  );\n};\n\nconst ListExperiences = () => {\n  return (\n    <React.Fragment>\n      <div className=\"terminal_prompt\">\n        <Prompt />\n        <span className=\"prompt_text\">ls -l previous_work</span>\n      </div>\n      <div className=\"terminal_prompt_output\">\n        total 4+ years\n        <br />\n        Software Engineer | full-time | Kasa&nbsp;&nbsp;&nbsp;&nbsp; | Jan 2020 – Present\n        <br />\n        Software Engineer | full-time | Veeva&nbsp;&nbsp;&nbsp; | Sep 2017 – Jan 2020\n        <br />\n        Software Engineer | part-time | Kibo&nbsp;&nbsp;&nbsp;&nbsp; | Mar 2016 - Oct 2016\n        <br />\n        Web Developer&nbsp;&nbsp;&nbsp;&nbsp; | part-time | CAL FIRE | May 2015 - Feb 2016\n      </div>\n    </React.Fragment>\n  );\n};\n\nconst EchoEducation = () => {\n  return (\n    <React.Fragment>\n      <div className=\"terminal_prompt\">\n        <Prompt />\n        <span className=\"prompt_text\">echo &#36;EDUCATION</span>\n      </div>\n      <div className=\"terminal_prompt_output\">B.S. Computer Science, Cal Poly SLO, Jun 2017</div>\n    </React.Fragment>\n  );\n};\n\nconst LessSkills = () => {\n  return (\n    <React.Fragment>\n      <div className=\"terminal_prompt\">\n        <Prompt />\n        <span className=\"prompt_text\">cut -d : -f 1 /etc/technologies</span>\n      </div>\n      <div className=\"terminal_prompt_output\">\n        Java\n        <br />\n        Node.js\n        <br />\n        MySQL\n        <br />\n        MongoDB\n        <br />\n        AWS\n      </div>\n    </React.Fragment>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (response.status === 404 || (contentType != null && contentType.indexOf('javascript') === -1)) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.');\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then((registration) => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}